# Copyright (c) 2025, Benjamin Vernoux <bvernoux@hydrasdr.com>
# 
# This workflow is licensed exclusively for HydraSDR products and related development.
# Unauthorized use, modification, or distribution for non-HydraSDR products is prohibited.
# All rights reserved.
#
# SoapyHydraSDR Build and Release Workflow
# For more information about HydraSDR products: https://hydrasdr.com

name: Build and Release SoapyHydraSDR Modules (Windows, GNU/Linux, MacOS)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Global environment variables
  PACKAGE_NAME: "soapyhydrasdr"
  MAINTAINER: "Benjamin Vernoux <bvernoux@hydrasdr.com>"
  HOMEPAGE: "https://hydrasdr.com"

jobs:
  # Extract version once and share across all jobs
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      rfone_version: ${{ steps.rfone_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Extract SoapyHydraSDR version
      id: version
      run: |
        VERSION=$(grep 'set(SOAPYHYDRASDR_VERSION' CMakeLists.txt | sed 's/.*"\([^"]*\)".*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted SoapyHydraSDR version: $VERSION"
    
    - name: Get latest rfone_host release
      id: rfone_version
      run: |
        RFONE_VERSION=$(curl -s https://api.github.com/repos/hydrasdr/rfone_host/releases/latest | jq -r .tag_name)
        echo "version=$RFONE_VERSION" >> $GITHUB_OUTPUT
        echo "Latest rfone_host version: $RFONE_VERSION"

  build:
    needs: extract-version
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            name: "Windows-x64"
            platform: "windows"
          - os: ubuntu-24.04
            name: "Ubuntu-24.04-LTS-Noble-Numbat"
            platform: "linux"
            create_deb: true
          - os: macos-14
            name: "macOS-ARM64"
            platform: "macos"
            arch: "arm64"
          - os: macos-13
            name: "macOS-x86_64"
            platform: "macos"
            arch: "x86_64"

    name: ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v4

    # === Download and Build LibHydraSDR from Source ===
    - name: Download rfone_host source
      uses: actions/checkout@v4
      with:
        repository: hydrasdr/rfone_host
        ref: ${{ needs.extract-version.outputs.rfone_version }}
        path: rfone_host_src

    - name: Verify rfone_host source download
      run: |
        echo "Verifying rfone_host source download..."
        if [ -d rfone_host_src ]; then
          echo "Source code downloaded successfully to rfone_host_src/"
          ls -la rfone_host_src/ | head -10
        else
          echo "Failed to download source code"
          exit 1
        fi
      shell: bash

    # === Platform Dependencies ===
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config libusb-1.0-0-dev
        
        # Install SoapySDR development packages
        sudo apt-get install -y libsoapysdr-dev soapysdr-tools

    - name: Install macOS dependencies
      if: matrix.platform == 'macos'
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1
      run: |
        brew install --quiet cmake libusb pkg-config
        
        # Install SoapySDR
        brew install --quiet soapysdr

    # === Windows Dependencies ===
    - name: Setup Windows build tools
      if: matrix.platform == 'windows'
      uses: microsoft/setup-msbuild@v2

    - name: Install Windows dependencies
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        # Install vcpkg and use it to install dependencies
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
        
        # Install SoapySDR and libusb
        C:\vcpkg\vcpkg.exe install soapysdr:x64-windows libusb:x64-windows
        
        # Set environment for CMake to find vcpkg packages
        echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV

    - name: Download Windows dependencies for LibHydraSDR
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        # Download dependencies for building libhydrasdr
        Invoke-WebRequest "https://github.com/libusb/libusb/releases/download/v1.0.23/libusb-1.0.23.7z" -OutFile "libusb.7z"
        Invoke-WebRequest "https://gcc.gnu.org/pub/pthreads-win32/pthreads-w32-2-9-1-release.zip" -OutFile "pthreads.zip"
        
        # Extract libusb
        New-Item -ItemType Directory -Path "deps\libusb" -Force
        7z x libusb.7z -o"deps\libusb"
        
        # Extract pthreads
        Expand-Archive pthreads.zip -DestinationPath "temp" -Force
        $prebuilt = Get-ChildItem "temp" -Recurse -Directory | Where-Object { $_.Name -eq "Pre-built.2" }
        New-Item -ItemType Directory -Path "deps\pthreads" -Force
        Copy-Item "$($prebuilt.FullName)\*" -Destination "deps\pthreads" -Recurse -Force
        Remove-Item "temp" -Recurse -Force

    # === Build LibHydraSDR ===
    - name: Build LibHydraSDR (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cd rfone_host_src
        mkdir build && cd build
        
        if [ "${{ matrix.platform }}" = "macos" ]; then
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../rfone_host_build/install -DCMAKE_OSX_ARCHITECTURES=arm64 -DINSTALL_UDEV_RULES=OFF
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../rfone_host_build/install -DCMAKE_OSX_ARCHITECTURES=x86_64 -DINSTALL_UDEV_RULES=OFF
          fi
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../rfone_host_build/install -DINSTALL_UDEV_RULES=OFF
        fi
        
        make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
        make install
        
        # Verify installation
        echo "=== Verifying LibHydraSDR installation ==="
        ls -la ../../rfone_host_build/install/lib/ || echo "No lib directory found"
        ls -la ../../rfone_host_build/install/include/ || echo "No include directory found"
        
        # Check for specific files based on platform
        if [ "${{ matrix.platform }}" = "macos" ]; then
          EXPECTED_LIB="../../rfone_host_build/install/lib/libhydrasdr.dylib"
        else
          EXPECTED_LIB="../../rfone_host_build/install/lib/libhydrasdr.so"
        fi
        
        if [ -f "$EXPECTED_LIB" ]; then
          echo "✓ Found $(basename $EXPECTED_LIB)"
          # Only use file command if available
          if command -v file >/dev/null 2>&1; then
            file "$EXPECTED_LIB"
          else
            ls -l "$EXPECTED_LIB"
          fi
        else
          echo "✗ $(basename $EXPECTED_LIB) not found"
          echo "Available files in lib directory:"
          find ../../rfone_host_build/install -name "*hydrasdr*" 2>/dev/null || echo "No hydrasdr files found"
          exit 1
        fi
        
        # Check for header file - it might be in libhydrasdr subdirectory
        HEADER_FOUND=false
        for header_path in "../../rfone_host_build/install/include/hydrasdr.h" "../../rfone_host_build/install/include/libhydrasdr/hydrasdr.h"; do
          if [ -f "$header_path" ]; then
            echo "✓ Found hydrasdr.h at: $header_path"
            HEADER_FOUND=true
            break
          fi
        done
        
        if [ "$HEADER_FOUND" = false ]; then
          echo "✗ hydrasdr.h not found in expected locations"
          echo "Available header files:"
          find ../../rfone_host_build/install/include -name "*.h" 2>/dev/null || echo "No header files found"
          exit 1
        fi

    - name: Build LibHydraSDR (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        Set-Location rfone_host_src
        New-Item -ItemType Directory -Path "build" -Force | Out-Null
        Set-Location build
        
        $currentDir = Get-Location
        $depsLibusb = Join-Path $currentDir "..\..\deps\libusb"
        $depsPthreads = Join-Path $currentDir "..\..\deps\pthreads"
        $installPrefix = Join-Path $currentDir "..\..\rfone_host_build\install"
        
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX="$installPrefix" -DLIBUSB_INCLUDE_DIR="$depsLibusb\include\libusb-1.0" -DLIBUSB_LIBRARIES="$depsLibusb\MS64\dll\libusb-1.0.lib" -DTHREADS_PTHREADS_INCLUDE_DIR="$depsPthreads\include" -DTHREADS_PTHREADS_WIN32_LIBRARY="$depsPthreads\lib\x64\pthreadVC2.lib"
        
        cmake --build . --config Release --parallel
        cmake --install . --config Release
        
        Write-Host "Copying runtime dependencies..."
        $installBinDir = Join-Path $installPrefix "bin"
        New-Item -ItemType Directory -Path $installBinDir -Force | Out-Null
        
        $libusbDll = Join-Path $depsLibusb "MS64\dll\libusb-1.0.dll"
        $pthreadsDll = Join-Path $depsPthreads "dll\x64\pthreadVC2.dll"
        
        if (Test-Path $libusbDll) {
          Copy-Item $libusbDll $installBinDir -ErrorAction SilentlyContinue
          Write-Host "Copied libusb-1.0.dll"
        }
        if (Test-Path $pthreadsDll) {
          Copy-Item $pthreadsDll $installBinDir -ErrorAction SilentlyContinue
          Write-Host "Copied pthreadVC2.dll"
        }
        
        Write-Host "Verifying LibHydraSDR installation..."
        $libDir = Join-Path $installPrefix "lib"
        $includeDir = Join-Path $installPrefix "include"
        
        if (Test-Path $libDir) {
          Write-Host "Found lib directory:"
          Get-ChildItem $libDir
        } else {
          Write-Host "No lib directory found"
        }
        
        if (Test-Path $includeDir) {
          Write-Host "Found include directory:"
          Get-ChildItem $includeDir
        } else {
          Write-Host "No include directory found"
        }
        
        Write-Host "Checking for required files..."
        $expectedLib = Join-Path $installPrefix "bin\hydrasdr.lib"
        if (Test-Path $expectedLib) {
          Write-Host "Found hydrasdr.lib in bin directory - SUCCESS"
        } else {
          Write-Host "ERROR: hydrasdr.lib not found in bin directory"
          Write-Host "Available files in install directory:"
          Get-ChildItem $installPrefix -Recurse -Filter "*hydrasdr*" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          exit 1
        }
        
        Write-Host "Checking for header files..."
        $headerFound = $false
        $headerPath1 = Join-Path $includeDir "hydrasdr.h"
        $headerPath2 = Join-Path $includeDir "libhydrasdr\hydrasdr.h"
        
        if (Test-Path $headerPath1) {
          Write-Host "Found hydrasdr.h at: $headerPath1"
          $headerFound = $true
        }
        if (Test-Path $headerPath2) {
          Write-Host "Found hydrasdr.h at: $headerPath2"
          $headerFound = $true
        }
        
        if ($headerFound -eq $false) {
          Write-Host "ERROR: hydrasdr.h not found in expected locations"
          Write-Host "Available header files:"
          Get-ChildItem $includeDir -Recurse -Filter "*.h" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          exit 1
        }
        
        Write-Host "LibHydraSDR build completed successfully"

    # === Build SoapyHydraSDR ===
    - name: Configure SoapyHydraSDR build (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        mkdir build && cd build
        
        if [ "${{ matrix.platform }}" = "macos" ]; then
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64
          fi
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release
        fi

    - name: Configure SoapyHydraSDR build (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        New-Item -ItemType Directory -Path "build" -Force | Out-Null
        Set-Location build
        
        $installPrefix = Resolve-Path "..\rfone_host_build\install"
        $libhydrasdrLib = Join-Path $installPrefix "bin\hydrasdr.lib"
        $libhydrasdrInclude = Join-Path $installPrefix "include"
        
        Write-Host "Configuring with LibHydraSDR paths:"
        Write-Host "  Install prefix: $installPrefix"
        Write-Host "  Library: $libhydrasdrLib"
        Write-Host "  Include: $libhydrasdrInclude"
        Write-Host "  Library exists: $(Test-Path $libhydrasdrLib)"
        Write-Host "  Include exists: $(Test-Path $libhydrasdrInclude)"
        
        # Create a symlink or copy the library to where CMake expects it
        $expectedLibDir = Join-Path $installPrefix "lib"
        $expectedLib = Join-Path $expectedLibDir "hydrasdr.lib"
        
        if (-not (Test-Path $expectedLibDir)) {
          New-Item -ItemType Directory -Path $expectedLibDir -Force | Out-Null
        }
        
        if (-not (Test-Path $expectedLib)) {
          Copy-Item $libhydrasdrLib $expectedLib
          Write-Host "Copied library to expected location: $expectedLib"
        }
        
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake" -DCMAKE_PREFIX_PATH="$installPrefix" -DLIBHYDRASDR_ROOT="$installPrefix"

    # === Build ===
    - name: Build SoapyHydraSDR (Linux/macOS)
      if: matrix.platform != 'windows'
      shell: bash
      run: |
        cd build
        if [ "${{ matrix.platform }}" = "macos" ]; then
          make -j$(sysctl -n hw.ncpu)
        else
          make -j$(nproc)
        fi

    - name: Build SoapyHydraSDR (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        cd build
        cmake --build . --config Release --parallel

    # === Package Artifacts ===
    - name: Package artifacts (Linux)
      if: matrix.platform == 'linux'
      run: |
        ARTIFACT_DIR="${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}"
        mkdir -p "$ARTIFACT_DIR"
        
        # Find and copy SoapySDR module
        find build -name "*SoapyHydraSDR*" -type f -exec cp {} "$ARTIFACT_DIR/" \;
        
        # Copy built libhydrasdr
        find rfone_host_build/install -name "libhydrasdr.so*" -exec cp {} "$ARTIFACT_DIR/" \; 2>/dev/null || true

    - name: Package artifacts (macOS)
      if: matrix.platform == 'macos'
      run: |
        ARTIFACT_DIR="${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}"
        mkdir -p "$ARTIFACT_DIR"
        
        # Find and copy SoapySDR module
        find build -name "*SoapyHydraSDR*" -type f -exec cp {} "$ARTIFACT_DIR/" \;
        
        # Copy built libhydrasdr
        find rfone_host_build/install -name "libhydrasdr.dylib*" -exec cp {} "$ARTIFACT_DIR/" \; 2>/dev/null || true

    - name: Package artifacts (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        $dir = "${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}"
        New-Item -ItemType Directory -Path $dir -Force
        
        # Find and copy only the SoapySDR module DLL (exclude build artifacts)
        Write-Host "Looking for SoapySDR module files..."
        Get-ChildItem build -Recurse -Include "*.dll" | Where-Object { $_.Name -like "*SoapyHydraSDR*" } | ForEach-Object {
          Write-Host "Found SoapySDR module: $($_.FullName)"
          Copy-Item $_.FullName -Destination $dir -ErrorAction SilentlyContinue
        }
        
        # Copy built libhydrasdr and dependencies
        Write-Host "Copying LibHydraSDR dependencies..."
        if (Test-Path "rfone_host_build\install\bin") {
          Get-ChildItem "rfone_host_build\install\bin" -Filter "*.dll" | Copy-Item -Destination $dir -ErrorAction SilentlyContinue
        }
        if (Test-Path "rfone_host_build\install\lib") {
          Get-ChildItem "rfone_host_build\install\lib" -Filter "*.lib" | Copy-Item -Destination $dir -ErrorAction SilentlyContinue
        }
        
        Write-Host "Final package contents:"
        Get-ChildItem $dir | ForEach-Object { Write-Host "  $($_.Name)" }

    # === Create .deb package ===
    - name: Create .deb package
      if: matrix.create_deb == true
      shell: bash
      run: |
        PACKAGE_VERSION="${{ needs.extract-version.outputs.version }}"
        ARCH="amd64"
        
        PACKAGE_NAME_FULL="${{ env.PACKAGE_NAME }}"
        PACKAGE_DIR="${PACKAGE_NAME_FULL}_${PACKAGE_VERSION}_${ARCH}"
        
        # Get SoapySDR module directory
        SOAPY_MODULE_DIR=$(pkg-config --variable=moduledir SoapySDR)
        if [ -z "$SOAPY_MODULE_DIR" ]; then
          SOAPY_MODULE_DIR="/usr/lib/x86_64-linux-gnu/SoapySDR/modules0.8"
        fi
        
        # Create package directory structure
        mkdir -p "${PACKAGE_DIR}/DEBIAN"
        mkdir -p "${PACKAGE_DIR}${SOAPY_MODULE_DIR}"
        mkdir -p "${PACKAGE_DIR}/usr/lib"
        mkdir -p "${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME_FULL}"
        
        # Copy SoapySDR module
        find build -name "*SoapyHydraSDR*" -type f -exec cp {} "${PACKAGE_DIR}${SOAPY_MODULE_DIR}/" \;
        
        # Copy libhydrasdr
        find rfone_host_build/install -name "libhydrasdr.so*" -exec cp {} "${PACKAGE_DIR}/usr/lib/" \; 2>/dev/null || true
        
        # Create control file
        cat > "${PACKAGE_DIR}/DEBIAN/control" << EOF
        Package: ${PACKAGE_NAME_FULL}
        Version: ${PACKAGE_VERSION}
        Section: electronics
        Priority: optional
        Architecture: ${ARCH}
        Depends: libsoapysdr0.8 (>= 0.8), libusb-1.0-0 (>= 1.0.20)
        Maintainer: ${{ env.MAINTAINER }}
        Description: SoapySDR module for HydraSDR RFOne devices
         SoapySDR driver module for HydraSDR RFOne software-defined radio hardware.
         Provides seamless integration with SoapySDR ecosystem and applications.
         .
         This package includes:
          - SoapySDR module for HydraSDR RFOne
          - LibHydraSDR shared library
          - Automatic device detection and configuration
          - Full streaming and control support
         .
         Built for: ${{ matrix.name }}
         LibHydraSDR version: ${{ needs.extract-version.outputs.rfone_version }}
        Homepage: ${{ env.HOMEPAGE }}
        EOF
        
        # Create maintenance scripts
        cat > "${PACKAGE_DIR}/DEBIAN/postinst" << 'EOF'
        #!/bin/bash
        set -e
        if [ "$1" = "configure" ]; then
          # Refresh SoapySDR module cache
          if command -v SoapySDRUtil >/dev/null 2>&1; then
            SoapySDRUtil --info || true
          fi
          # Update library cache
          command -v ldconfig >/dev/null 2>&1 && ldconfig || true
        fi
        exit 0
        EOF
        
        cat > "${PACKAGE_DIR}/DEBIAN/postrm" << 'EOF'
        #!/bin/bash
        set -e
        if [ "$1" = "remove" ] || [ "$1" = "purge" ]; then
          command -v ldconfig >/dev/null 2>&1 && ldconfig || true
        fi
        exit 0
        EOF
        
        chmod 755 "${PACKAGE_DIR}/DEBIAN/postinst" "${PACKAGE_DIR}/DEBIAN/postrm"
        
        # Create documentation
        cat > "${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME_FULL}/copyright" << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: SoapyHydraSDR
        Upstream-Contact: ${{ env.MAINTAINER }}
        Source: https://github.com/hydrasdr/SoapyHydraSDR
        
        Files: *
        Copyright: 2025 ${{ env.MAINTAINER }}
        License: Custom-HydraSDR
         This software is licensed exclusively for HydraSDR products and related development.
         Unauthorized use, modification, or distribution for non-HydraSDR products is prohibited.
         All rights reserved.
        EOF
        
        cat > "${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME_FULL}/changelog.Debian" << EOF
        ${PACKAGE_NAME_FULL} (${PACKAGE_VERSION}) unstable; urgency=medium
        
          * Automated build from CI for ${{ matrix.name }}
          * Built with LibHydraSDR ${{ needs.extract-version.outputs.rfone_version }}
          * Built from commit ${{ github.sha }}
        
         -- ${{ env.MAINTAINER }}  $(date -R)
        EOF
        
        gzip -9 "${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME_FULL}/changelog.Debian"
        
        # Set permissions
        find "${PACKAGE_DIR}" -type d -exec chmod 755 {} \;
        find "${PACKAGE_DIR}${SOAPY_MODULE_DIR}" -type f -exec chmod 644 {} \;
        find "${PACKAGE_DIR}/usr/lib" -name "*.so*" -exec chmod 644 {} \;
        
        # Build package
        dpkg-deb --build "${PACKAGE_DIR}"
        
        # Rename to distribution-specific name
        DIST_SPECIFIC_NAME="${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${PACKAGE_VERSION}.deb"
        mv "${PACKAGE_DIR}.deb" "${DIST_SPECIFIC_NAME}"
        
        # Verify the package
        dpkg-deb --info "${DIST_SPECIFIC_NAME}"
        dpkg-deb --contents "${DIST_SPECIFIC_NAME}"
        echo "Created distribution-specific .deb package: ${DIST_SPECIFIC_NAME}"

    # === Testing ===
    - name: Test (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "Testing SoapySDR module installation..."
        # Test that libhydrasdr was built correctly
        export LD_LIBRARY_PATH=rfone_host_build/install/lib:$LD_LIBRARY_PATH
        rfone_host_build/install/bin/hydrasdr_lib_version || echo "hydrasdr_lib_version not available"
        
        # Test that the SoapySDR module can be found
        if command -v SoapySDRUtil >/dev/null 2>&1; then
          # Copy module to temporary location for testing
          TEMP_MODULE_DIR=$(mktemp -d)
          find build -name "*SoapyHydraSDR*" -type f -exec cp {} "$TEMP_MODULE_DIR/" \;
          export SOAPY_SDR_PLUGIN_PATH="$TEMP_MODULE_DIR"
          
          echo "Available SoapySDR modules:"
          SoapySDRUtil --info || echo "SoapySDR info command failed"
          
          echo "Looking for HydraSDR devices:"
          SoapySDRUtil --find || echo "No HydraSDR hardware detected (normal in CI environment)"
          
          rm -rf "$TEMP_MODULE_DIR"
        else
          echo "SoapySDRUtil not available for testing"
        fi

    - name: Test (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "Testing SoapySDR module installation..."
        # Test that libhydrasdr was built correctly
        export DYLD_LIBRARY_PATH=rfone_host_build/install/lib:$DYLD_LIBRARY_PATH
        rfone_host_build/install/bin/hydrasdr_lib_version || echo "hydrasdr_lib_version not available"
        
        if command -v SoapySDRUtil >/dev/null 2>&1; then
          # Copy module to temporary location for testing
          TEMP_MODULE_DIR=$(mktemp -d)
          find build -name "*SoapyHydraSDR*" -type f -exec cp {} "$TEMP_MODULE_DIR/" \;
          export SOAPY_SDR_PLUGIN_PATH="$TEMP_MODULE_DIR"
          
          echo "Available SoapySDR modules:"
          SoapySDRUtil --info || echo "SoapySDR info command failed"
          
          echo "Looking for HydraSDR devices:"
          SoapySDRUtil --find || echo "No HydraSDR hardware detected (normal in CI environment)"
          
          rm -rf "$TEMP_MODULE_DIR"
        else
          echo "SoapySDRUtil not available for testing"
        fi

    - name: Test (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        Write-Host "Testing SoapySDR module installation..."
        Write-Host "Testing libhydrasdr..."
        
        # Test libhydrasdr
        if (Test-Path "rfone_host_build\install\bin\hydrasdr_lib_version.exe") {
          try {
            & "rfone_host_build\install\bin\hydrasdr_lib_version.exe"
            Write-Host "LibHydraSDR test completed successfully"
          } catch {
            Write-Host "hydrasdr_lib_version test failed (normal if hardware not connected)"
          }
        } else {
          Write-Host "hydrasdr_lib_version.exe not found"
        }
        
        # Test SoapySDR
        $SoapySDRUtil = "C:\vcpkg\installed\x64-windows\bin\SoapySDRUtil.exe"
        if (Test-Path $SoapySDRUtil) {
          Write-Host "Found SoapySDRUtil, running tests..."
          try {
            Write-Host "Available SoapySDR modules:"
            & $SoapySDRUtil --info
            Write-Host "Looking for HydraSDR devices:"
            & $SoapySDRUtil --find
            Write-Host "SoapySDR tests completed successfully"
          } catch {
            Write-Host "SoapySDR tests failed (normal in CI environment without hardware)"
          }
        } else {
          Write-Host "SoapySDRUtil not available - skipping SoapySDR tests (this is normal)"
        }
        
        Write-Host "Windows testing completed - all tests are optional in CI environment"
        exit 0

    # === Upload ===
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}
        path: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}/*
        retention-days: 30

    - name: Upload .deb package
      if: matrix.create_deb == true
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}-deb
        path: "${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v*.deb"
        retention-days: 30

  build_linux_distros:
    needs: extract-version
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu LTS Versions
          - container: "ubuntu:22.04"
            name: "Ubuntu-22.04-LTS-Jammy-Jellyfish"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          - container: "ubuntu:20.04"
            name: "Ubuntu-20.04-LTS-Focal-Fossa"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          
          # Debian Stable/Testing
          - container: "debian:trixie"
            name: "Debian-13-Trixie"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          - container: "debian:bookworm"
            name: "Debian-12-Bookworm"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          - container: "debian:bullseye"
            name: "Debian-11-Bullseye"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          
          # Linux Mint Versions (Ubuntu-based)
          - container: "linuxmintd/mint22-amd64:latest"
            name: "Linux-Mint-22-Wilma"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          - container: "linuxmintd/mint21.3-amd64:latest"
            name: "Linux-Mint-21.3-Virginia"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          - container: "linuxmintd/mint21.2-amd64:latest"
            name: "Linux-Mint-21.2-Victoria"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          - container: "linuxmintd/mint21.1-amd64:latest"
            name: "Linux-Mint-21.1-Vera"
            pkg_manager: "apt"
            create_deb: true
            deps: "build-essential cmake pkg-config libusb-1.0-0-dev libsoapysdr-dev wget curl ca-certificates"
          
          # Fedora Latest Versions
          - container: "fedora:42"
            name: "Fedora-42"
            pkg_manager: "dnf"
            create_rpm: true
            deps: "gcc gcc-c++ cmake pkg-config libusb1-devel make rpm-build rpmdevtools tar gzip SoapySDR-devel wget ca-certificates chrpath"
          - container: "fedora:41"
            name: "Fedora-41"
            pkg_manager: "dnf"
            create_rpm: true
            deps: "gcc gcc-c++ cmake pkg-config libusb1-devel make rpm-build rpmdevtools tar gzip SoapySDR-devel wget ca-certificates chrpath"
          
          # openSUSE
          - container: "opensuse/tumbleweed:latest"
            name: "openSUSE-Tumbleweed"
            pkg_manager: "zypper"
            create_rpm: true
            deps: "gcc gcc-c++ cmake pkgconfig libusb-1_0-devel make rpm-build tar gzip soapy-sdr-devel wget ca-certificates chrpath"
          
          # Enterprise Linux
          - container: "almalinux:9"
            name: "AlmaLinux-9"
            pkg_manager: "dnf"
            create_rpm: true
            deps: "gcc gcc-c++ cmake pkg-config libusb1-devel make epel-release rpm-build rpmdevtools wget ca-certificates chrpath"
            enable_repos: true
            allow_erasing: true
          
          # Rolling Release Distributions
          - container: "archlinux:latest"
            name: "Arch-Linux"
            pkg_manager: "pacman"
            create_pkg: true
            deps: "base-devel cmake pkg-config libusb sudo soapysdr wget curl ca-certificates"

    name: ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v4

    # === Download and Build LibHydraSDR from Source ===
    - name: Download rfone_host source
      uses: actions/checkout@v4
      with:
        repository: hydrasdr/rfone_host
        ref: ${{ needs.extract-version.outputs.rfone_version }}
        path: rfone_host_src

    - name: Verify rfone_host source download
      shell: bash
      run: |
        echo "Verifying rfone_host source download..."
        if [ -d rfone_host_src ]; then
          echo "Source code downloaded successfully to rfone_host_src/"
          ls -la rfone_host_src/ | head -10
        else
          echo "Failed to download source code"
          exit 1
        fi

    # === Install dependencies ===
    - name: Install dependencies
      run: |
        case "${{ matrix.pkg_manager }}" in
          "apt")
            export DEBIAN_FRONTEND=noninteractive TZ=UTC
            apt-get update
            apt-get install -y ${{ matrix.deps }}
            ;;
          "dnf")
            dnf update -y
            # Enable additional repositories for RHEL-based systems
            if [[ "${{ matrix.name }}" == *"AlmaLinux"* ]]; then
              dnf install -y epel-release
              # Enable CodeReady Builder (CRB) repository for AlmaLinux 9
              dnf config-manager --set-enabled crb || dnf config-manager --set-enabled powertools || true
              # Install SoapySDR from EPEL
              dnf install -y SoapySDR-devel
            fi
            
            # Handle curl conflicts on RHEL-based systems
            if [[ "${{ matrix.allow_erasing }}" == "true" ]]; then
              echo "Installing with --allowerasing to handle curl conflicts..."
              dnf install -y --allowerasing ${{ matrix.deps }}
            else
              dnf install -y ${{ matrix.deps }}
            fi
            ;;
          "zypper")
            zypper refresh
            # Handle special package names for openSUSE
            if [[ "${{ matrix.name }}" == *"openSUSE"* ]]; then
              # Try alternative package names if the main ones fail
              zypper install -y gcc gcc-c++ cmake pkgconfig libusb-1_0-devel make rpm-build tar gzip wget ca-certificates chrpath || true
              # Try to install SoapySDR - it might have different names
              zypper install -y soapy-sdr-devel || zypper install -y SoapySDR-devel || zypper install -y libsoapysdr-devel || echo "SoapySDR not available, will build without"
            else
              zypper install -y ${{ matrix.deps }}
            fi
            ;;
          "pacman")
            pacman -Sy --noconfirm archlinux-keyring
            pacman -Syu --noconfirm
            pacman -S --noconfirm ${{ matrix.deps }}
            ;;
        esac

    # === Build LibHydraSDR ===
    - name: Build LibHydraSDR
      run: |
        cd rfone_host_src
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../rfone_host_build/install -DINSTALL_UDEV_RULES=OFF
        make -j$(nproc)
        make install
        
        # Verify installation
        echo "=== Verifying LibHydraSDR installation ==="
        ls -la ../../rfone_host_build/install/lib/ || echo "No lib directory found"
        ls -la ../../rfone_host_build/install/include/ || echo "No include directory found"
        
        # Check for specific files
        if [ -f "../../rfone_host_build/install/lib/libhydrasdr.so" ]; then
          echo "✓ Found libhydrasdr.so"
          # Only use file command if available
          if command -v file >/dev/null 2>&1; then
            file ../../rfone_host_build/install/lib/libhydrasdr.so
          else
            ls -l ../../rfone_host_build/install/lib/libhydrasdr.so
          fi
        else
          echo "✗ libhydrasdr.so not found"
          echo "Available files in lib directory:"
          find ../../rfone_host_build/install -name "*hydrasdr*" 2>/dev/null || echo "No hydrasdr files found"
          exit 1
        fi
        
        # Check for header file - it might be in libhydrasdr subdirectory
        HEADER_FOUND=false
        for header_path in "../../rfone_host_build/install/include/hydrasdr.h" "../../rfone_host_build/install/include/libhydrasdr/hydrasdr.h"; do
          if [ -f "$header_path" ]; then
            echo "✓ Found hydrasdr.h at: $header_path"
            HEADER_FOUND=true
            break
          fi
        done
        
        if [ "$HEADER_FOUND" = false ]; then
          echo "✗ hydrasdr.h not found in expected locations"
          echo "Available header files:"
          find ../../rfone_host_build/install/include -name "*.h" 2>/dev/null || echo "No header files found"
          exit 1
        fi

    # === Build SoapyHydraSDR ===
    - name: Configure and build SoapyHydraSDR
      run: |
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)

    # === Package Artifacts ===
    - name: Package artifacts
      run: |
        ARTIFACT_DIR="${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}"
        mkdir -p "$ARTIFACT_DIR"
        find build -name "*SoapyHydraSDR*" -type f -exec cp {} "$ARTIFACT_DIR/" \;
        find rfone_host_build/install -name "libhydrasdr.so*" -exec cp {} "$ARTIFACT_DIR/" \; 2>/dev/null || true

    # === Create distribution packages ===
    - name: Create .deb package
      if: matrix.create_deb == true
      shell: bash
      run: |
        PACKAGE_VERSION="${{ needs.extract-version.outputs.version }}"
        ARCH="amd64"
        PACKAGE_NAME_FULL="${{ env.PACKAGE_NAME }}"
        PACKAGE_DIR="${PACKAGE_NAME_FULL}_${PACKAGE_VERSION}_${ARCH}"
        
        # Get SoapySDR module directory (fallback if pkg-config not available)
        SOAPY_MODULE_DIR="/usr/lib/x86_64-linux-gnu/SoapySDR/modules0.8"
        if command -v pkg-config >/dev/null 2>&1; then
          SOAPY_MODULE_DIR_DETECTED=$(pkg-config --variable=moduledir SoapySDR 2>/dev/null || echo "")
          if [ -n "$SOAPY_MODULE_DIR_DETECTED" ]; then
            SOAPY_MODULE_DIR="$SOAPY_MODULE_DIR_DETECTED"
          fi
        fi
        
        mkdir -p "${PACKAGE_DIR}/DEBIAN"
        mkdir -p "${PACKAGE_DIR}${SOAPY_MODULE_DIR}"
        mkdir -p "${PACKAGE_DIR}/usr/lib"
        mkdir -p "${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME_FULL}"
        
        find build -name "*SoapyHydraSDR*" -type f -exec cp {} "${PACKAGE_DIR}${SOAPY_MODULE_DIR}/" \;
        find rfone_host_build/install -name "libhydrasdr.so*" -exec cp {} "${PACKAGE_DIR}/usr/lib/" \; 2>/dev/null || true
        
        cat > "${PACKAGE_DIR}/DEBIAN/control" << EOF
        Package: ${PACKAGE_NAME_FULL}
        Version: ${PACKAGE_VERSION}
        Section: electronics
        Priority: optional
        Architecture: ${ARCH}
        Depends: libsoapysdr0.8, libusb-1.0-0 (>= 1.0.20)
        Maintainer: ${{ env.MAINTAINER }}
        Description: SoapySDR module for HydraSDR RFOne devices (${{ matrix.name }})
         SoapySDR driver module for HydraSDR RFOne software-defined radio hardware.
         Built for: ${{ matrix.name }}
         LibHydraSDR version: ${{ needs.extract-version.outputs.rfone_version }}
        Homepage: ${{ env.HOMEPAGE }}
        EOF
        
        cat > "${PACKAGE_DIR}/DEBIAN/postinst" << 'EOF'
        #!/bin/bash
        set -e
        if [ "$1" = "configure" ]; then
          if command -v SoapySDRUtil >/dev/null 2>&1; then
            SoapySDRUtil --info >/dev/null 2>&1 || true
          fi
          command -v ldconfig >/dev/null 2>&1 && ldconfig || true
        fi
        EOF
        chmod 755 "${PACKAGE_DIR}/DEBIAN/postinst"
        
        find "${PACKAGE_DIR}" -type d -exec chmod 755 {} \;
        find "${PACKAGE_DIR}${SOAPY_MODULE_DIR}" -type f -exec chmod 644 {} \;
        find "${PACKAGE_DIR}/usr/lib" -name "*.so*" -exec chmod 644 {} \;
        
        dpkg-deb --build "${PACKAGE_DIR}"
        mv "${PACKAGE_DIR}.deb" "${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${PACKAGE_VERSION}.deb"

    - name: Create .rpm package
      if: matrix.create_rpm == true
      shell: bash
      run: |
        PACKAGE_VERSION="${{ needs.extract-version.outputs.version }}"
        PACKAGE_NAME_FULL="${{ env.PACKAGE_NAME }}"
        BUILD_DIR="$(pwd)"
        
        # Setup RPM build environment (different for openSUSE vs Fedora/RHEL)
        if [[ "${{ matrix.pkg_manager }}" == "zypper" ]]; then
          # openSUSE uses /usr/src/packages (already set by system)
          RPM_BUILD_ROOT="/usr/src/packages"
          mkdir -p ${RPM_BUILD_ROOT}/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          USE_CUSTOM_TOPDIR=false
        else
          # Fedora/RHEL uses ~/rpmbuild
          rpmdev-setuptree || mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          RPM_BUILD_ROOT="$HOME/rpmbuild"
          USE_CUSTOM_TOPDIR=true
        fi
        
        # Get SoapySDR module directory
        SOAPY_MODULE_DIR="/usr/lib64/SoapySDR/modules0.8"
        LIBDIR="/usr/lib64"
        
        # Create temporary build structure
        BUILD_ROOT="${RPM_BUILD_ROOT}/BUILD/${PACKAGE_NAME_FULL}-${PACKAGE_VERSION}"
        mkdir -p "${BUILD_ROOT}"
        
        # Copy built files to temporary location for packaging
        TEMP_INSTALL_DIR="${BUILD_ROOT}/temp_install"
        mkdir -p "${TEMP_INSTALL_DIR}${SOAPY_MODULE_DIR}"
        mkdir -p "${TEMP_INSTALL_DIR}${LIBDIR}"
        
        # Copy SoapySDR module and strip problematic RPATHs
        find "${BUILD_DIR}/build" -name "*SoapyHydraSDR*" -type f -exec cp {} "${TEMP_INSTALL_DIR}${SOAPY_MODULE_DIR}/" \; 2>/dev/null || echo "No SoapyHydraSDR module found"
        
        # Strip RPATHs from SoapySDR module to avoid packaging issues
        if command -v chrpath >/dev/null 2>&1; then
          find "${TEMP_INSTALL_DIR}${SOAPY_MODULE_DIR}" -name "*.so" -exec chrpath -d {} \; 2>/dev/null || true
        elif command -v patchelf >/dev/null 2>&1; then
          find "${TEMP_INSTALL_DIR}${SOAPY_MODULE_DIR}" -name "*.so" -exec patchelf --remove-rpath {} \; 2>/dev/null || true
        fi
        
        # Copy libhydrasdr
        find "${BUILD_DIR}/rfone_host_build/install" -name "libhydrasdr.so*" -exec cp {} "${TEMP_INSTALL_DIR}${LIBDIR}/" \; 2>/dev/null || echo "No libhydrasdr found"
        
        # List what we actually have
        echo "=== Files prepared for RPM packaging ==="
        find "${TEMP_INSTALL_DIR}" -type f | head -20
        
        # Create spec file with proper changelog format
        cat > ${RPM_BUILD_ROOT}/SPECS/${PACKAGE_NAME_FULL}.spec << 'EOF'
        Name:           soapyhydrasdr
        Version:        %{version}
        Release:        1%{?dist}
        Summary:        SoapySDR module for HydraSDR RFOne devices
        
        License:        Custom-HydraSDR
        URL:            %{homepage}
        BuildArch:      x86_64
        
        BuildRequires:  gcc-c++, cmake
        %if 0%{?suse_version}
        BuildRequires:  pkgconfig, libusb-1_0-devel, soapy-sdr-devel
        Requires:       libusb-1_0-0, soapy-sdr
        %else
        BuildRequires:  pkg-config, libusb1-devel, SoapySDR-devel
        Requires:       libusb1, SoapySDR
        %endif
        
        %description
        SoapySDR driver module for HydraSDR RFOne software-defined radio hardware.
        Provides seamless integration with SoapySDR ecosystem and applications.
        
        Built for: %{distname}
        LibHydraSDR version: %{rfone_version}
        
        %prep
        # No prep needed for binary package
        
        %build
        # No build needed for binary package
        
        %install
        rm -rf %{buildroot}
        mkdir -p %{buildroot}/usr/lib64/SoapySDR/modules0.8
        mkdir -p %{buildroot}/usr/lib64
        
        # Copy files from temporary install location
        if [ -d "%{temp_install}/usr/lib64/SoapySDR/modules0.8" ]; then
          cp -a "%{temp_install}/usr/lib64/SoapySDR/modules0.8"/* %{buildroot}/usr/lib64/SoapySDR/modules0.8/ 2>/dev/null || true
        fi
        if [ -d "%{temp_install}/usr/lib64" ]; then
          find "%{temp_install}/usr/lib64" -name "libhydrasdr.so*" -exec cp {} %{buildroot}/usr/lib64/ \; 2>/dev/null || true
        fi
        
        %files
        %defattr(-,root,root,-)
        /usr/lib64/SoapySDR/modules0.8/*
        /usr/lib64/libhydrasdr.so*
        
        %post
        /sbin/ldconfig
        if command -v SoapySDRUtil >/dev/null 2>&1; then
          SoapySDRUtil --info >/dev/null 2>&1 || true
        fi
        
        %postun
        /sbin/ldconfig
        
        %changelog
        * Tue Jul 30 2024 Benjamin Vernoux <bvernoux@hydrasdr.com> - %{version}-1
        - Automated build from CI for %{distname}
        - Built with LibHydraSDR %{rfone_version}
        EOF
        
        # Build RPM with RPATH checking disabled and variable substitution
        cd ${RPM_BUILD_ROOT}/SPECS
        echo "Building RPM with settings:"
        echo "  RPM_BUILD_ROOT: ${RPM_BUILD_ROOT}"
        echo "  USE_CUSTOM_TOPDIR: ${USE_CUSTOM_TOPDIR}"
        echo "  BUILD_ROOT: ${BUILD_ROOT}"
        
        if [[ "${USE_CUSTOM_TOPDIR}" == "true" ]]; then
          # Fedora/RHEL - use custom _topdir
          QA_RPATHS=$((0x0001|0x0002|0x0010)) rpmbuild -bb ${PACKAGE_NAME_FULL}.spec \
            --define "_topdir ${RPM_BUILD_ROOT}" \
            --define "_sourcedir ${BUILD_ROOT}" \
            --define "_builddir ${BUILD_ROOT}" \
            --define "version ${PACKAGE_VERSION}" \
            --define "homepage ${{ env.HOMEPAGE }}" \
            --define "distname ${{ matrix.name }}" \
            --define "rfone_version ${{ needs.extract-version.outputs.rfone_version }}" \
            --define "temp_install ${TEMP_INSTALL_DIR}"
        else
          # openSUSE - don't override _topdir
          QA_RPATHS=$((0x0001|0x0002|0x0010)) rpmbuild -bb ${PACKAGE_NAME_FULL}.spec \
            --define "_sourcedir ${BUILD_ROOT}" \
            --define "_builddir ${BUILD_ROOT}" \
            --define "version ${PACKAGE_VERSION}" \
            --define "homepage ${{ env.HOMEPAGE }}" \
            --define "distname ${{ matrix.name }}" \
            --define "rfone_version ${{ needs.extract-version.outputs.rfone_version }}" \
            --define "temp_install ${TEMP_INSTALL_DIR}"
        fi
        
        # Copy resulting RPM (look in correct location for each distribution)
        echo "=== Looking for RPM files ==="
        if [[ "${{ matrix.pkg_manager }}" == "zypper" ]]; then
          # openSUSE puts RPMs in /usr/src/packages/RPMS
          find ${RPM_BUILD_ROOT}/RPMS -name "*.rpm" -ls
          find ${RPM_BUILD_ROOT}/RPMS -name "*.rpm" -exec cp {} "${BUILD_DIR}/${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${PACKAGE_VERSION}.rpm" \;
        else
          # Fedora/RHEL puts RPMs in ~/rpmbuild/RPMS
          find ~/rpmbuild/RPMS -name "*.rpm" -ls
          find ~/rpmbuild/RPMS -name "*.rpm" -exec cp {} "${BUILD_DIR}/${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${PACKAGE_VERSION}.rpm" \;
        fi
        
        # Verify RPM was created
        if [ -f "${BUILD_DIR}/${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${PACKAGE_VERSION}.rpm" ]; then
          echo "SUCCESS: Created RPM package: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${PACKAGE_VERSION}.rpm"
          ls -la "${BUILD_DIR}/${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${PACKAGE_VERSION}.rpm"
        else
          echo "ERROR: Failed to create RPM package"
          echo "Available RPM files in all locations:"
          find ${RPM_BUILD_ROOT}/RPMS -name "*.rpm" -ls 2>/dev/null || echo "No RPM files in ${RPM_BUILD_ROOT}/RPMS"
          find ~/rpmbuild/RPMS -name "*.rpm" -ls 2>/dev/null || echo "No RPM files in ~/rpmbuild/RPMS"
          exit 1
        fi

    # === Upload artifacts ===
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}
        path: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}/*
        retention-days: 30

    - name: Upload .deb package
      if: matrix.create_deb == true
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}-deb
        path: "${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v*.deb"
        retention-days: 30

    - name: Pre-upload RPM verification
      if: matrix.create_rpm == true
      run: |
        echo "=== Pre-upload RPM verification ==="
        echo "Job: build_linux_distros"
        echo "Matrix name: ${{ matrix.name }}"
        echo "Matrix create_rpm: ${{ matrix.create_rpm }}"
        echo "Expected RPM: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}.rpm"
        echo "Upload pattern: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v*.rpm"
        echo ""
        
        # Check if the specific file exists
        RPM_FILE="${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}.rpm"
        if [ -f "$RPM_FILE" ]; then
          echo "✅ Target RPM file exists: $RPM_FILE"
          ls -la "$RPM_FILE"
        else
          echo "❌ Target RPM file missing: $RPM_FILE"
          exit 1
        fi
        
        # Check what files match the upload pattern
        echo ""
        echo "=== Files matching upload pattern ==="
        ls -la ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v*.rpm 2>/dev/null || echo "No files match the upload pattern"
        
        # Double-check working directory
        echo ""
        echo "=== Current working directory ==="
        pwd
        echo ""
        echo "=== All RPM files in current directory ==="
        find . -maxdepth 1 -name "*.rpm" -type f -exec ls -la {} \;

    - name: Upload .rpm package
      if: matrix.create_rpm == true
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}-rpm
        path: "${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v*.rpm"
        retention-days: 30
        if-no-files-found: error

    - name: Post-upload RPM confirmation
      if: matrix.create_rpm == true
      run: |
        echo "=== Post-upload confirmation ==="
        echo "Job: build_linux_distros"
        echo "If you see this message, the upload step completed"
        echo "Check the GitHub Actions Artifacts section for:"
        echo "  ${{ env.PACKAGE_NAME }}-${{ matrix.name }}-v${{ needs.extract-version.outputs.version }}-rpm"

  create_full_archive:
    needs: [extract-version, build, build_linux_distros]
    runs-on: ubuntu-latest
    steps:
    - name: Download All Builds
      uses: actions/download-artifact@v4

    - name: Create platform-specific archives
      run: |
        mkdir soapyhydrasdr_all
        
        # Copy all native package files
        echo "=== Looking for .deb packages ==="
        find . -name "${{ env.PACKAGE_NAME }}-*-v*.deb" -exec ls -la {} \; -exec cp {} soapyhydrasdr_all/ \;
        
        echo "=== Looking for .rpm packages ==="
        find . -name "${{ env.PACKAGE_NAME }}-*-v*.rpm" -exec ls -la {} \; -exec cp {} soapyhydrasdr_all/ \;
        
        echo "=== Looking for .pkg.tar.* packages ==="
        find . -name "${{ env.PACKAGE_NAME }}-*-v*.pkg.tar.*" -exec ls -la {} \; -exec cp {} soapyhydrasdr_all/ \;
        
        # Create archives for platforms without native packages
        for dir in ${{ env.PACKAGE_NAME }}-*; do
          if [ -d "$dir" ]; then
            if [[ "$dir" == *"-deb" ]] || [[ "$dir" == *"-rpm" ]] || [[ "$dir" == *"-pkg" ]]; then
              continue
            fi
            
            if [[ "$dir" == *"Windows"* ]]; then
              cd "$dir" && zip -r "../soapyhydrasdr_all/${dir}.zip" . && cd ..
            elif [[ "$dir" == *"macOS"* ]]; then
              tar -czf "soapyhydrasdr_all/${dir}.tar.gz" -C "$dir" .
            elif [[ "$dir" == *"Ubuntu-24.04"* ]] || [[ "$dir" == *"Ubuntu-22.04"* ]]; then
              # Always create ZIP archives for Ubuntu (CI/CD requirement)
              cd "$dir" && zip -r "../soapyhydrasdr_all/${dir}.zip" . && cd ..
            fi
          fi
        done
        
        echo "=== Final contents of soapyhydrasdr_all ==="
        ls -la soapyhydrasdr_all/
        
        echo "=== Summary of package types ==="
        echo "DEB packages:"
        ls soapyhydrasdr_all/*.deb 2>/dev/null || echo "No .deb packages found"
        echo "RPM packages:"
        ls soapyhydrasdr_all/*.rpm 2>/dev/null || echo "No .rpm packages found"
        echo "PKG packages:"
        ls soapyhydrasdr_all/*.pkg.tar.* 2>/dev/null || echo "No .pkg packages found"
        echo "Archive files:"
        ls soapyhydrasdr_all/*.{zip,tar.gz} 2>/dev/null || echo "No archive files found"

    - name: Upload Full Archive
      uses: actions/upload-artifact@v4
      with:
        name: soapyhydrasdr_all
        path: soapyhydrasdr_all/*

  update_nightly_release:
    needs: [extract-version, create_full_archive]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
    - name: Download All Builds
      uses: actions/download-artifact@v4
      
    - name: Create or Update Nightly Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Delete existing nightly release
        gh release delete nightly -R ${{github.repository}} --yes || echo "Nightly release doesn't exist"
        
        # Create fresh nightly release
        gh release create nightly -R ${{github.repository}} --title "Nightly Build" --notes "Automated nightly build from CI - Built from commit ${{ github.sha }} with LibHydraSDR ${{ needs.extract-version.outputs.rfone_version }}" --prerelease
        
        # Upload platform-specific archives
        if [ -d "soapyhydrasdr_all" ] && [ "$(ls -A soapyhydrasdr_all)" ]; then
          gh release upload nightly soapyhydrasdr_all/* -R ${{github.repository}}
        fi

    - name: Update Release Notes
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release edit nightly -R ${{github.repository}} --notes "Automated nightly build from CI

        **Built from commit:** ${{ github.sha }}
        **Build Date:** $(date -u)
        **Branch:** ${{ github.ref_name }}
        **SoapyHydraSDR Version:** ${{ needs.extract-version.outputs.version }}
        **LibHydraSDR Version:** ${{ needs.extract-version.outputs.rfone_version }}

        ## SoapySDR Module for HydraSDR RFOne

        This release provides SoapySDR driver modules for HydraSDR RFOne software-defined radio hardware, enabling seamless integration with the SoapySDR ecosystem and applications like GQRX, SDR++, GNU Radio, and more.

        **Key Features:**
        - Built with latest LibHydraSDR (${{ needs.extract-version.outputs.rfone_version }}) from source
        - No hardcoded dependencies - always uses latest HydraSDR host libraries
        - Full SoapySDR integration for all compatible applications
        - Multi-platform native packages with automatic dependency management
        - Comprehensive distribution support

        For detailed installation instructions and usage information, see the project README."
